var search_data = {"index":{"searchIndex":["bloom","hyperlog","level","snapshot","sophiadb","sparkey","hash","read","sparkeyconnection","write","add()","batch()","batch()","close()","close()","close()","collisions()","contains?()","count()","create()","del()","del()","del()","delete()","delete()","delete()","each()","each()","each()","each()","each_key()","each_value()","empty!()","empty?()","empty?()","fastforward!()","fetch()","filter()","flush()","get()","get()","get()","include?()","includes?()","includes?()","insert()","intersect()","key?()","key_values()","keys()","keys()","keys()","length()","length()","map()","maxkeylength()","maxvaluelength()","new()","new()","new()","new()","new()","new()","new()","new()","new()","prop()","put()","put()","put()","range()","reduce()","replace()","rewind!()","set()","set()","set()","snap()","stats()","stats()","union()","union()","union_store()","update()","value?()","values()","values()","index.html","readme"],"longSearchIndex":["bloom","hyperlog","level","snapshot","sophiadb","sparkey","sparkey::hash","sparkey::read","sparkey::sparkeyconnection","sparkey::write","hyperlog#add()","level#batch()","sparkey::write#batch()","sparkey::hash#close()","sparkey::read#close()","sparkey::write#close()","sparkey::hash#collisions()","level#contains?()","hyperlog#count()","hyperlog#create()","level#del()","sophiadb#del()","sparkey::write#del()","bloom#delete()","level#delete()","sophiadb#delete()","level#each()","sophiadb#each()","sparkey::hash#each()","sparkey::read#each()","sophiadb#each_key()","sophiadb#each_value()","sophiadb#empty!()","sophiadb#empty?()","sparkey::hash#empty?()","snapshot#fastforward!()","sophiadb#fetch()","sophiadb#filter()","sparkey::write#flush()","level#get()","sophiadb#get()","sparkey::hash#get()","sparkey::hash#include?()","bloom#includes?()","level#includes?()","bloom#insert()","hyperlog#intersect()","sophiadb#key?()","sophiadb#key_values()","level#keys()","sophiadb#keys()","sparkey::hash#keys()","sophiadb#length()","sparkey::hash#length()","level#map()","sparkey::hash#maxkeylength()","sparkey::hash#maxvaluelength()","bloom::new()","hyperlog::new()","level::new()","snapshot::new()","sophiadb::new()","sparkey::hash::new()","sparkey::read::new()","sparkey::sparkeyconnection::new()","sparkey::write::new()","level#prop()","level#put()","sophiadb#put()","sparkey::write#put()","level#range()","level#reduce()","sophiadb#replace()","snapshot#rewind!()","level#set()","sophiadb#set()","sparkey::write#set()","level#snap()","bloom#stats()","level#stats()","hyperlog#union()","sparkey::hash#union()","hyperlog#union_store()","sophiadb#update()","sophiadb#value?()","sophiadb#values()","sparkey::hash#values()","",""],"info":[["Bloom","","Bloom.html","","<p>Bloom\n\n<pre>redis = Redis.new # create a Redis connection\nbf = Bloom.new redis # returns a new Bloom instance</pre>\n"],["HyperLog","","HyperLog.html","","<p>HyperLog\n\n<pre>redis = Redis.new # create a Redis connection\nhl = HyperLog.new redis # returns a new HyperLog ...</pre>\n"],["Level","","Level.html","","<p>LevelDB\n\n<pre>Level.new &quot;level.db&quot; # returns a new Level instance</pre>\n"],["Snapshot","","Snapshot.html","","<p>Snapshot\n\n<pre>s = Snapshot.new(@db.snapshot) # returns a new Snapshot instance</pre>\n"],["SophiaDB","","SophiaDB.html","","<p>SophiaDB\n\n<pre>SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance</pre>\n"],["Sparkey","","Sparkey.html","",""],["Sparkey::Hash","","Sparkey/Hash.html","","<p>Hash\n\n<pre>hash = Sparkey::Hash.new &quot;mylog.log&quot;, &quot;mylog.hash&quot;</pre>\n"],["Sparkey::Read","","Sparkey/Read.html","","<p>Write\n\n<pre>reader = Sparkey::Read.new &quot;mylog.log&quot;</pre>\n"],["Sparkey::SparkeyConnection","","Sparkey/SparkeyConnection.html","","<p>SparkeyConnection\n\n<pre>SparkeyConnection.new &quot;mylog.log&quot;, &quot;mylog.hash&quot; # returns a gnista reader, writer and ...</pre>\n"],["Sparkey::Write","","Sparkey/Write.html","","<p>Write\n\n<pre>writer = Sparkey::Write.new &quot;mylog.log&quot;</pre>\n"],["add","HyperLog","HyperLog.html#method-i-add","(name, items)","<p>Add\n\n<pre>redis = Redis.new # create a Redis connection\nhl = HyperLog.new redis # returns a new HyperLog instance ...</pre>\n"],["batch","Level","Level.html#method-i-batch","()","<p>Batch\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">Level</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&quot;level.db&quot;</span> <span class=\"ruby-comment\"># returns a new Level instance</span>\n<span class=\"ruby-identifier\">db</span>.<span class=\"ruby-identifier\">batch</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">d</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-comment\"># create a batch operation ...</span>\n</pre>\n"],["batch","Sparkey::Write","Sparkey/Write.html#method-i-batch","()","<p>Batch\n\n<pre>writer = Sparkey::Write.new &quot;mylog.log&quot; # create writer\nwriter.batch do\n writer.put(&quot;foo&quot;, &quot;bar&quot;) ...</pre>\n"],["close","Sparkey::Hash","Sparkey/Hash.html#method-i-close","()","<p>Close\n\n<pre>hash = Sparkey::Hash.new &quot;mylog.log&quot;, &quot;mylog.hash&quot; # create hash reader\nhash.close # close connection</pre>\n"],["close","Sparkey::Read","Sparkey/Read.html#method-i-close","()","<p>Close\n\n<pre>reader = Sparkey::Read.new &quot;mylog.log&quot; # create reader\nreader.close # close connection</pre>\n"],["close","Sparkey::Write","Sparkey/Write.html#method-i-close","()","<p>Close\n\n<pre>writer = Sparkey::Write.new &quot;mylog.log&quot; # create writer\nwriter.close # close connection</pre>\n"],["collisions","Sparkey::Hash","Sparkey/Hash.html#method-i-collisions","()","<p>Collisions\n\n<pre>hash = Sparkey::Hash.new &quot;mylog.log&quot;, &quot;mylog.hash&quot; # create hash reader\nhash.collisions # collisions ...</pre>\n"],["contains?","Level","Level.html#method-i-contains-3F","(key)","<p>Contains?\n\n<pre>db = Level.new &quot;level.db&quot; # returns a new Level instance\ndb.contains?(&quot;foo&quot;) # db contains key ...</pre>\n"],["count","HyperLog","HyperLog.html#method-i-count","(name)","<p>Count\n\n<pre>redis = Redis.new # create a Redis connection\nhl = HyperLog.new redis # returns a new HyperLog instance ...</pre>\n"],["create","HyperLog","HyperLog.html#method-i-create","(name, array)","<p>Create\n\n<pre>redis = Redis.new # create a Redis connection\nhl = HyperLog.new redis # returns a new HyperLog ...</pre>\n"],["del","Level","Level.html#method-i-del","(key)","<p>Del\n\n<pre>db = Level.new &quot;level.db&quot; # returns a new Level instance\ndb.set(&quot;foo&quot;, &quot;bar&quot;) # sets key `foo` to ...</pre>\n"],["del","SophiaDB","SophiaDB.html#method-i-del","(key)","<p>Del\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.set(&quot;foo&quot;, &quot;bar&quot;) # sets key `foo` ...</pre>\n"],["del","Sparkey::Write","Sparkey/Write.html#method-i-del","(key)","<p>Delete\n\n<pre>writer = Sparkey::Write.new &quot;mylog.log&quot; # create writer\nwriter.set(&quot;foo&quot;, &quot;bar&quot;) # key `foo` = ...</pre>\n"],["delete","Bloom","Bloom.html#method-i-delete","(obj)","<p>Delete\n\n<pre>redis = Redis.new # create a Redis connection\nbf = Bloom.new redis # returns a new Bloom instance ...</pre>\n"],["delete","Level","Level.html#method-i-delete","(key)","<p>Delete\n\n<pre>db = Level.new &quot;level.db&quot; # returns a new Level instance\ndb.set(&quot;foo&quot;, &quot;bar&quot;) # sets key `foo` ...</pre>\n"],["delete","SophiaDB","SophiaDB.html#method-i-delete","(key)","<p>Delete\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.set(&quot;foo&quot;, &quot;bar&quot;) # sets key `foo` ...</pre>\n"],["each","Level","Level.html#method-i-each","(reversed = false)","<p>Each\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">Level</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&quot;level.db&quot;</span> <span class=\"ruby-comment\"># returns a new Level instance</span>\n<span class=\"ruby-identifier\">db</span>.<span class=\"ruby-identifier\">each</span>(<span class=\"ruby-keyword\">true</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">chunk</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-comment\"># for each chunk, ...</span>\n</pre>\n"],["each","SophiaDB","SophiaDB.html#method-i-each","()","<p>Each\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">SophiaDB</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&quot;sophia.db&quot;</span> <span class=\"ruby-comment\"># returns a new Sophia instance</span>\n<span class=\"ruby-identifier\">db</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">key</span>, <span class=\"ruby-identifier\">value</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-comment\"># for each ...</span>\n</pre>\n"],["each","Sparkey::Hash","Sparkey/Hash.html#method-i-each","(hash)","<p>Each\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">hash</span> = <span class=\"ruby-constant\">Sparkey</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Hash</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&quot;mylog.log&quot;</span>, <span class=\"ruby-string\">&quot;mylog.hash&quot;</span> <span class=\"ruby-comment\"># create hash reader</span>\n<span class=\"ruby-identifier\">hash</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">chunk</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">key</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["each","Sparkey::Read","Sparkey/Read.html#method-i-each","()","<p>Each\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">reader</span> = <span class=\"ruby-constant\">Sparkey</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Read</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&quot;mylog.log&quot;</span> <span class=\"ruby-comment\"># create reader</span>\n<span class=\"ruby-identifier\">reader</span>.<span class=\"ruby-identifier\">each</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">chunk</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">key</span> = <span class=\"ruby-identifier\">chunk</span>[<span class=\"ruby-value\">0</span>] <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["each_key","SophiaDB","SophiaDB.html#method-i-each_key","()","<p>Each Key\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">SophiaDB</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&quot;sophia.db&quot;</span> <span class=\"ruby-comment\"># returns a new Sophia instance</span>\n<span class=\"ruby-identifier\">db</span>.<span class=\"ruby-identifier\">each_key</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">key</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-comment\"># for each ...</span>\n</pre>\n"],["each_value","SophiaDB","SophiaDB.html#method-i-each_value","()","<p>Each Value\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">SophiaDB</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&quot;sophia.db&quot;</span> <span class=\"ruby-comment\"># returns a new Sophia instance</span>\n<span class=\"ruby-identifier\">db</span>.<span class=\"ruby-identifier\">each_value</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">value</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-comment\"># for ...</span>\n</pre>\n"],["empty!","SophiaDB","SophiaDB.html#method-i-empty-21","()","<p>Empty\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.empty! # empty the entire database</pre>\n"],["empty?","SophiaDB","SophiaDB.html#method-i-empty-3F","()","<p>Empty?\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.empty? # is the db empty?</pre>\n"],["empty?","Sparkey::Hash","Sparkey/Hash.html#method-i-empty-3F","()","<p>Empty\n\n<pre>hash = Sparkey::Hash.new &quot;mylog.log&quot;, &quot;mylog.hash&quot; # create hash reader\nhash.empty? # is the hash ...</pre>\n"],["fastforward!","Snapshot","Snapshot.html#method-i-fastforward-21","()","<p>FastForward\n\n<pre>s = Snapshot.new(@db.snapshot) # returns a new Snapshot instance\ns.fastforward! # fastforward ...</pre>\n"],["fetch","SophiaDB","SophiaDB.html#method-i-fetch","(key)","<p>Fetch\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.fetch(&quot;foo&quot;) # returns key `foo`</pre>\n"],["filter","SophiaDB","SophiaDB.html#method-i-filter","()","<p>Filter\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">SophiaDB</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&quot;sophia.db&quot;</span> <span class=\"ruby-comment\"># returns a new Sophia instance</span>\n<span class=\"ruby-identifier\">res</span> = <span class=\"ruby-identifier\">db</span>.<span class=\"ruby-identifier\">filter</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">key</span>, <span class=\"ruby-identifier\">value</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["flush","Sparkey::Write","Sparkey/Write.html#method-i-flush","()","<p>Flush\n\n<pre>writer = Sparkey::Write.new &quot;mylog.log&quot; # create writer\nwriter.flush # flush to database</pre>\n"],["get","Level","Level.html#method-i-get","(key)","<p>Get\n\n<pre>db = Level.new &quot;level.db&quot; # returns a new Level instance\ndb.get(&quot;foo&quot;) # returns key `foo`</pre>\n"],["get","SophiaDB","SophiaDB.html#method-i-get","(key)","<p>Get\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.get(&quot;foo&quot;) # returns key `foo`</pre>\n"],["get","Sparkey::Hash","Sparkey/Hash.html#method-i-get","(key)","<p>Get\n\n<pre>hash = Sparkey::Hash.new &quot;mylog.log&quot;, &quot;mylog.hash&quot; # create hash reader\nhash.get(&quot;foo&quot;) # returns ...</pre>\n"],["include?","Sparkey::Hash","Sparkey/Hash.html#method-i-include-3F","(key)","<p>Includes?\n\n<pre>hash = Sparkey::Hash.new &quot;mylog.log&quot;, &quot;mylog.hash&quot; # create hash reader\nhash.include?(&quot;foo&quot;) ...</pre>\n"],["includes?","Bloom","Bloom.html#method-i-includes-3F","(obj)","<p>Includes\n\n<pre>redis = Redis.new # create a Redis connection\nbf = Bloom.new redis # returns a new Bloom instance ...</pre>\n"],["includes?","Level","Level.html#method-i-includes-3F","(key)","<p>Includes?\n\n<pre>db = Level.new &quot;level.db&quot; # returns a new Level instance\ndb.includes?(&quot;foo&quot;) # db contains key ...</pre>\n"],["insert","Bloom","Bloom.html#method-i-insert","(obj)","<p>Insert\n\n<pre>redis = Redis.new # create a Redis connection\nbf = Bloom.new redis # returns a new Bloom instance ...</pre>\n"],["intersect","HyperLog","HyperLog.html#method-i-intersect","(sets)","<p>Intersect\n\n<pre>redis = Redis.new # create a Redis connection\nhl = HyperLog.new redis # returns a new HyperLog ...</pre>\n"],["key?","SophiaDB","SophiaDB.html#method-i-key-3F","(key)","<p>Key?\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.key?(&quot;foo&quot;) # db contains key `foo`</pre>\n"],["key_values","SophiaDB","SophiaDB.html#method-i-key_values","(*keys)","<p>Key Values\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.key_values(&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;) ...</pre>\n"],["keys","Level","Level.html#method-i-keys","()","<p>Keys\n\n<pre>db = Level.new &quot;level.db&quot; # returns a new Level instance\ndb.keys # an array of all the keys in the ...</pre>\n"],["keys","SophiaDB","SophiaDB.html#method-i-keys","()","<p>Keys\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.keys # an array of all the keys ...</pre>\n"],["keys","Sparkey::Hash","Sparkey/Hash.html#method-i-keys","()","<p>Keys\n\n<pre>hash = Sparkey::Hash.new &quot;mylog.log&quot;, &quot;mylog.hash&quot; # create hash reader\nhash.keys # an array of all ...</pre>\n"],["length","SophiaDB","SophiaDB.html#method-i-length","()","<p>Length\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.length # number of keys in db</pre>\n"],["length","Sparkey::Hash","Sparkey/Hash.html#method-i-length","()","<p>Length\n\n<pre>hash = Sparkey::Hash.new &quot;mylog.log&quot;, &quot;mylog.hash&quot; # create hash reader\nhash.length # size of the ...</pre>\n"],["map","Level","Level.html#method-i-map","()","<p>Map\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">Level</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&quot;level.db&quot;</span> <span class=\"ruby-comment\"># returns a new Level instance</span>\n<span class=\"ruby-identifier\">db</span>.<span class=\"ruby-identifier\">map</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">chunk</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-comment\"># for each chunk, in reverse ...</span>\n</pre>\n"],["maxkeylength","Sparkey::Hash","Sparkey/Hash.html#method-i-maxkeylength","()","<p>MaxKeyLen\n\n<pre>hash = Sparkey::Hash.new &quot;mylog.log&quot;, &quot;mylog.hash&quot; # create hash reader\nhash.maxkeylen # largest ...</pre>\n"],["maxvaluelength","Sparkey::Hash","Sparkey/Hash.html#method-i-maxvaluelength","()","<p>MaxValueLen\n\n<pre>hash = Sparkey::Hash.new &quot;mylog.log&quot;, &quot;mylog.hash&quot; # create hash reader\nhash.maxvaluelen # ...</pre>\n"],["new","Bloom","Bloom.html#method-c-new","(redis, options = {})",""],["new","HyperLog","HyperLog.html#method-c-new","(redis)",""],["new","Level","Level.html#method-c-new","(path)",""],["new","Snapshot","Snapshot.html#method-c-new","(snap)",""],["new","SophiaDB","SophiaDB.html#method-c-new","(path)",""],["new","Sparkey::Hash","Sparkey/Hash.html#method-c-new","(path, hash)",""],["new","Sparkey::Read","Sparkey/Read.html#method-c-new","(path)",""],["new","Sparkey::SparkeyConnection","Sparkey/SparkeyConnection.html#method-c-new","(path, hash = nil)",""],["new","Sparkey::Write","Sparkey/Write.html#method-c-new","(path, hash = nil)",""],["prop","Level","Level.html#method-i-prop","(p)","<p>Prop\n\n<pre>db = Level.new &quot;level.db&quot; # returns a new Level instance\ndb.prop(&quot;foo&quot;) # get db property `foo`</pre>\n"],["put","Level","Level.html#method-i-put","(key, value)","<p>Put\n\n<pre>db = Level.new &quot;level.db&quot; # returns a new Level instance\ndb.put(&quot;foo&quot;, &quot;bar&quot;) # sets key `foo` to ...</pre>\n"],["put","SophiaDB","SophiaDB.html#method-i-put","(key, value)","<p>Put\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.put(&quot;foo&quot;, &quot;bar&quot;) # sets key `foo` ...</pre>\n"],["put","Sparkey::Write","Sparkey/Write.html#method-i-put","(key, value)","<p>Put\n\n<pre>writer = Sparkey::Write.new &quot;mylog.log&quot;\nwriter.put(&quot;foo&quot;, &quot;bar&quot;) #key `foo` = `bar`</pre>\n"],["range","Level","Level.html#method-i-range","(f, t)","<p>Range\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">Level</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&quot;level.db&quot;</span> <span class=\"ruby-comment\"># returns a new Level instance</span>\n<span class=\"ruby-identifier\">db</span>.<span class=\"ruby-identifier\">range</span>(<span class=\"ruby-string\">&quot;a&quot;</span>, <span class=\"ruby-string\">&quot;z&quot;</span>) <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">chunk</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-comment\"># for each ...</span>\n</pre>\n"],["reduce","Level","Level.html#method-i-reduce","(arr = [])","<p>Reduce\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">db</span> = <span class=\"ruby-constant\">Level</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-string\">&quot;level.db&quot;</span> <span class=\"ruby-comment\"># returns a new Level instance</span>\n<span class=\"ruby-identifier\">db</span>.<span class=\"ruby-identifier\">reduce</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">chunk</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-comment\"># for each chunk, ...</span>\n</pre>\n"],["replace","SophiaDB","SophiaDB.html#method-i-replace","(*args)","<p>Replace\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.set(&quot;foo&quot;, &quot;bar&quot;)\ndb.set(&quot;bar&quot;, ...</pre>\n"],["rewind!","Snapshot","Snapshot.html#method-i-rewind-21","()","<p>Rewind\n\n<pre>s = Snapshot.new(@db.snapshot) # returns a new Snapshot instance\ns.rewind! # rewind back to when ...</pre>\n"],["set","Level","Level.html#method-i-set","(key, value)","<p>Set\n\n<pre>db = Level.new &quot;level.db&quot; # returns a new Level instance\ndb.set(&quot;foo&quot;, &quot;bar&quot;) # sets key `foo` to ...</pre>\n"],["set","SophiaDB","SophiaDB.html#method-i-set","(key, value)","<p>Set\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.set(&quot;foo&quot;, &quot;bar&quot;) # sets key `foo` ...</pre>\n"],["set","Sparkey::Write","Sparkey/Write.html#method-i-set","(key, value, flush)","<p>Set\n\n<pre>writer = Sparkey::Write.new &quot;mylog.log&quot; # create writer\nwriter.set(&quot;foo&quot;, &quot;bar&quot;) # key `foo` = `bar`</pre>\n"],["snap","Level","Level.html#method-i-snap","()","<p>Snap\n\n<pre>db = Level.new &quot;level.db&quot; # returns a new Level instance\ndb.snap # return a new Snapshot for the ...</pre>\n"],["stats","Bloom","Bloom.html#method-i-stats","()","<p>Stats\n\n<pre>redis = Redis.new # create a Redis connection\nbf = Bloom.new redis # returns a new Bloom instance ...</pre>\n"],["stats","Level","Level.html#method-i-stats","()","<p>Stats\n\n<pre>db = Level.new &quot;level.db&quot; # returns a new Level instance\ndb.stats # output db stats</pre>\n"],["union","HyperLog","HyperLog.html#method-i-union","(sets)","<p>Union\n\n<pre>redis = Redis.new # create a Redis connection\nhl = HyperLog.new redis # returns a new HyperLog instance ...</pre>\n"],["union","Sparkey::Hash","Sparkey/Hash.html#method-i-union","()","<p>Union\n\n<pre>hash = Sparkey::Hash.new &quot;mylog.log&quot;, &quot;mylog.hash&quot; # create hash reader\nhash.union # collisions ...</pre>\n"],["union_store","HyperLog","HyperLog.html#method-i-union_store","(sets, out)","<p>Union\n\n<pre>redis = Redis.new # create a Redis connection\nhl = HyperLog.new redis # returns a new HyperLog instance ...</pre>\n"],["update","SophiaDB","SophiaDB.html#method-i-update","(*args)","<p>Set\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.set(&quot;foo&quot;, &quot;baz&quot;) # set key `foo` ...</pre>\n"],["value?","SophiaDB","SophiaDB.html#method-i-value-3F","(value)","<p>Value?\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.value?(&quot;foo&quot;) # db contains value ...</pre>\n"],["values","SophiaDB","SophiaDB.html#method-i-values","()","<p>Values\n\n<pre>db = SophiaDB.new &quot;sophia.db&quot; # returns a new Sophia instance\ndb.values # an array of all the values ...</pre>\n"],["values","Sparkey::Hash","Sparkey/Hash.html#method-i-values","()","<p>Values\n\n<pre>hash = Sparkey::Hash.new &quot;mylog.log&quot;, &quot;mylog.hash&quot; # create hash reader\nhash.values # an array ...</pre>\n"],["index.html","","index_html.html","","<p>&lt;!DOCTYPE HTML&gt; &lt;html lang=“en-US”&gt;\n\n<pre>&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta ...</pre>\n"],["readme","","readme_md.html","","<p>DB Helpers\n<p>Ruby Embedded DB Helpers, the way I like it.\n<p>Check out the Documentation!\n"]]}}